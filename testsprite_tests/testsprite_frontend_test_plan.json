[
  {
    "id": "TC001",
    "title": "API - Create new session successfully",
    "description": "Verify that the API endpoint correctly creates a new user session and returns a unique session ID.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send a POST request to the session creation endpoint."
      },
      {
        "type": "assertion",
        "description": "Verify the response status is 201 Created."
      },
      {
        "type": "assertion",
        "description": "Verify the response contains a unique session ID."
      }
    ]
  },
  {
    "id": "TC002",
    "title": "API - Retrieve existing session conversation history",
    "description": "Verify that the API endpoint returns the full conversation history for an existing session ID.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Create a session and send several messages using the chat API."
      },
      {
        "type": "action",
        "description": "Send a GET request to the conversation history endpoint with the session ID."
      },
      {
        "type": "assertion",
        "description": "Verify the response status is 200 OK."
      },
      {
        "type": "assertion",
        "description": "Verify the returned conversation history matches all messages sent during the session."
      }
    ]
  },
  {
    "id": "TC003",
    "title": "API - Send message and receive Gemini AI contextual response",
    "description": "Verify that sending a user message results in a relevant context-aware response generated by Google Gemini AI.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send a POST request with a user message and existing session ID to chat endpoint."
      },
      {
        "type": "assertion",
        "description": "Verify the response status is 200 OK."
      },
      {
        "type": "assertion",
        "description": "Verify the response message is contextually relevant and coherent."
      }
    ]
  },
  {
    "id": "TC004",
    "title": "API - Use FAQ dataset to answer common query",
    "description": "Verify that when a user query matches a frequently asked question, the API returns the FAQ answer promptly.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send a user message matching a seeded FAQ question."
      },
      {
        "type": "assertion",
        "description": "Verify the response matches the FAQ answer stored in the database."
      }
    ]
  },
  {
    "id": "TC005",
    "title": "API - Escalation mechanism activation",
    "description": "Verify that when the bot cannot answer a query, the escalation mechanism triggers an appropriate escalation response.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send a user message with a query outside bot and FAQ knowledge."
      },
      {
        "type": "assertion",
        "description": "Verify the response indicates escalation simulation has occurred."
      }
    ]
  },
  {
    "id": "TC006",
    "title": "API - Handle invalid session ID in message API",
    "description": "Verify the API responds correctly and gracefully when an invalid or non-existent session ID is provided.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send a message POST request with an invalid session ID."
      },
      {
        "type": "assertion",
        "description": "Verify the response status indicates an error (e.g., 404 Not Found or 400 Bad Request)."
      },
      {
        "type": "assertion",
        "description": "Verify the response contains an appropriate error message about invalid session."
      }
    ]
  },
  {
    "id": "TC007",
    "title": "API - FAQ seeding script populates database",
    "description": "Verify that running the FAQ seeding script correctly inserts the predefined FAQ data into the database.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Run the FAQ seeding script."
      },
      {
        "type": "assertion",
        "description": "Verify the MongoDB FAQ collection contains all the seeded FAQs after execution."
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Frontend - Send message and display AI response",
    "description": "Verify the frontend chat interface allows entering a message, sends it to backend, and displays the AI response in real time.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Load the chat web interface in a browser."
      },
      {
        "type": "action",
        "description": "Enter a valid message in chat input and submit."
      },
      {
        "type": "assertion",
        "description": "Verify the message appears in the chat window."
      },
      {
        "type": "assertion",
        "description": "Verify the AI response is received and displayed promptly and contextually."
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Frontend - Responsive UI on various screen sizes",
    "description": "Verify that the chat interface adjusts layout and usability suitably across desktop, tablet, and mobile screen sizes.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open the chat interface on desktop, tablet, and mobile viewport sizes."
      },
      {
        "type": "assertion",
        "description": "Verify chat input, send button, and messages are fully visible and usable on each screen size."
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Session Management - Clear and restart session",
    "description": "Verify that the user can clear the current session conversation history and start a fresh session successfully.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Within an active chat session, trigger the session restart or clear action."
      },
      {
        "type": "assertion",
        "description": "Verify the conversation history is cleared on both frontend and backend."
      },
      {
        "type": "assertion",
        "description": "Verify subsequent messages are stored as a new conversation context."
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Environment Configuration - Use env variables for API keys and DB",
    "description": "Verify that the application correctly loads environment variables for API keys and database connection strings, and fails safely if missing.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Start the backend with valid environment configuration."
      },
      {
        "type": "assertion",
        "description": "Verify the server connects successfully to database and AI API."
      },
      {
        "type": "action",
        "description": "Start the backend with missing or invalid environment variables."
      },
      {
        "type": "assertion",
        "description": "Verify the server fails safely with clear error messages."
      }
    ]
  },
  {
    "id": "TC012",
    "title": "API - Prevent data loss and maintain session conversation continuity",
    "description": "Verify that all user messages and bot replies are properly saved in the session conversation history and can be retrieved accurately after multiple exchanges.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send multiple messages in sequence in a session."
      },
      {
        "type": "action",
        "description": "Request conversation history via API."
      },
      {
        "type": "assertion",
        "description": "Verify the history contains all messages in correct order, with no data loss."
      }
    ]
  },
  {
    "id": "TC013",
    "title": "API - Handle malformed requests gracefully",
    "description": "Verify that the API returns proper error responses for malformed or missing required fields in requests.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Send a POST message request with missing message content field."
      },
      {
        "type": "assertion",
        "description": "Verify the response status is 400 Bad Request."
      },
      {
        "type": "assertion",
        "description": "Verify the response contains a clear error message about missing fields."
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Backend - Modular codebase and correct file organization",
    "description": "Verify that the backend contains the described modules and files as per architecture with no missing core files.",
    "category": "functional",
    "priority": "Low",
    "steps": [
      {
        "type": "action",
        "description": "Inspect backend project structure."
      },
      {
        "type": "assertion",
        "description": "Verify all specified files (server.js, routes/, services/, models/, scripts/) exist and contain relevant code modules."
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Escalation - Escalation simulation message format correctness",
    "description": "Verify that the escalation response returned by the backend follows the prescribed format and clearly informs the user about escalation.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Trigger escalation by sending an unanswerable query."
      },
      {
        "type": "assertion",
        "description": "Verify the escalation response is returned with correct message format and content."
      }
    ]
  }
]
